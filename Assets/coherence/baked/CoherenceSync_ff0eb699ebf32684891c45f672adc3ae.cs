// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using Coherence.Toolkit;
    using Coherence.Toolkit.Bindings;
    using Coherence.Entities;
    using Coherence.ProtocolDef;
    using Coherence.Brook;
    using Coherence.Toolkit.Bindings.ValueBindings;
    using Coherence.Toolkit.Bindings.TransformBindings;
    using Coherence.Connection;
    using Coherence.SimulationFrame;
    using Coherence.Interpolation;
    using Coherence.Log;
    using Logger = Coherence.Log.Logger;
    using UnityEngine.Scripting;
    [UnityEngine.Scripting.Preserve]
    public class Binding_ff0eb699ebf32684891c45f672adc3ae_a1b01801ddfb4f919e050a206ddef524 : PositionBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(WorldPosition);
        public override string CoherenceComponentName => "WorldPosition";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(coherenceSync.coherencePosition); }
            set { coherenceSync.coherencePosition = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldPosition)coherenceComponent).value;
            if (!coherenceSync.HasParentWithCoherenceSync) { value += floatingOriginDelta; }

            var simFrame = ((WorldPosition)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (WorldPosition)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldPosition();
        }    
    }
    [UnityEngine.Scripting.Preserve]
    public class Binding_ff0eb699ebf32684891c45f672adc3ae_b72198b2c9d14e9191eb8cd98835a77d : ReferenceBinding
    {   
        private global::Gravitas.GravitasSubject CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Gravitas.GravitasSubject)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_ff0eb699ebf32684891c45f672adc3ae_8801456816483979748);
        public override string CoherenceComponentName => "_ff0eb699ebf32684891c45f672adc3ae_8801456816483979748";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override Entity Value
        {
            get { return coherenceSync.CoherenceBridge.UnityObjectToEntityId(CastedUnityComponent.networkedCurrentFieldTransform); }
            set { CastedUnityComponent.networkedCurrentFieldTransform = coherenceSync.CoherenceBridge.EntityIdToTransform(value); }
        }

        protected override (Entity value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_ff0eb699ebf32684891c45f672adc3ae_8801456816483979748)coherenceComponent).networkedCurrentFieldTransform;

            var simFrame = ((_ff0eb699ebf32684891c45f672adc3ae_8801456816483979748)coherenceComponent).networkedCurrentFieldTransformSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_ff0eb699ebf32684891c45f672adc3ae_8801456816483979748)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.networkedCurrentFieldTransform = Value;
            }
            else
            {
                update.networkedCurrentFieldTransform = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.networkedCurrentFieldTransformSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _ff0eb699ebf32684891c45f672adc3ae_8801456816483979748();
        }    
    }
    [UnityEngine.Scripting.Preserve]
    public class Binding_ff0eb699ebf32684891c45f672adc3ae_57c7f9195bcb40668ca6c81a2cdc5341 : Vector3Binding
    {   
        private global::Gravitas.GravitasBody CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Gravitas.GravitasBody)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_ff0eb699ebf32684891c45f672adc3ae_7001076288282754374);
        public override string CoherenceComponentName => "_ff0eb699ebf32684891c45f672adc3ae_7001076288282754374";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(CastedUnityComponent.SyncedProxyPosition); }
            set { CastedUnityComponent.SyncedProxyPosition = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_ff0eb699ebf32684891c45f672adc3ae_7001076288282754374)coherenceComponent).SyncedProxyPosition;

            var simFrame = ((_ff0eb699ebf32684891c45f672adc3ae_7001076288282754374)coherenceComponent).SyncedProxyPositionSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_ff0eb699ebf32684891c45f672adc3ae_7001076288282754374)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.SyncedProxyPosition = Value;
            }
            else
            {
                update.SyncedProxyPosition = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.SyncedProxyPositionSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _ff0eb699ebf32684891c45f672adc3ae_7001076288282754374();
        }    
    }
    [UnityEngine.Scripting.Preserve]
    public class Binding_ff0eb699ebf32684891c45f672adc3ae_aea6c1a42ee849b5801a9c997b3d9666 : QuaternionBinding
    {   
        private global::Gravitas.GravitasBody CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Gravitas.GravitasBody)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_ff0eb699ebf32684891c45f672adc3ae_7001076288282754374);
        public override string CoherenceComponentName => "_ff0eb699ebf32684891c45f672adc3ae_7001076288282754374";
        public override uint FieldMask => 0b00000000000000000000000000000010;

        public override UnityEngine.Quaternion Value
        {
            get { return (UnityEngine.Quaternion)(CastedUnityComponent.SyncedProxyRotation); }
            set { CastedUnityComponent.SyncedProxyRotation = (UnityEngine.Quaternion)(value); }
        }

        protected override (UnityEngine.Quaternion value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_ff0eb699ebf32684891c45f672adc3ae_7001076288282754374)coherenceComponent).SyncedProxyRotation;

            var simFrame = ((_ff0eb699ebf32684891c45f672adc3ae_7001076288282754374)coherenceComponent).SyncedProxyRotationSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_ff0eb699ebf32684891c45f672adc3ae_7001076288282754374)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.SyncedProxyRotation = Value;
            }
            else
            {
                update.SyncedProxyRotation = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.SyncedProxyRotationSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _ff0eb699ebf32684891c45f672adc3ae_7001076288282754374();
        }    
    }

    [UnityEngine.Scripting.Preserve]
    public class CoherenceSync_ff0eb699ebf32684891c45f672adc3ae : CoherenceSyncBaked
    {
        private Entity entityId;
        private Logger logger = Coherence.Log.Log.GetLogger<CoherenceSync_ff0eb699ebf32684891c45f672adc3ae>();
        
        
        
        private IClient client;
        private CoherenceBridge bridge;
        
        private readonly Dictionary<string, Binding> bakedValueBindings = new Dictionary<string, Binding>()
        {
			["a1b01801ddfb4f919e050a206ddef524"] = new Binding_ff0eb699ebf32684891c45f672adc3ae_a1b01801ddfb4f919e050a206ddef524(),
			["b72198b2c9d14e9191eb8cd98835a77d"] = new Binding_ff0eb699ebf32684891c45f672adc3ae_b72198b2c9d14e9191eb8cd98835a77d(),
			["57c7f9195bcb40668ca6c81a2cdc5341"] = new Binding_ff0eb699ebf32684891c45f672adc3ae_57c7f9195bcb40668ca6c81a2cdc5341(),
			["aea6c1a42ee849b5801a9c997b3d9666"] = new Binding_ff0eb699ebf32684891c45f672adc3ae_aea6c1a42ee849b5801a9c997b3d9666(),
        };
        
        private Dictionary<string, Action<CommandBinding, CommandsHandler>> bakedCommandBindings = new Dictionary<string, Action<CommandBinding, CommandsHandler>>();
        
        public CoherenceSync_ff0eb699ebf32684891c45f672adc3ae()
        {
        }
        
        public override Binding BakeValueBinding(Binding valueBinding)
        {
            if (bakedValueBindings.TryGetValue(valueBinding.guid, out var bakedBinding))
            {
                valueBinding.CloneTo(bakedBinding);
                return bakedBinding;
            }
            
            return null;
        }
        
        public override void BakeCommandBinding(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            if (bakedCommandBindings.TryGetValue(commandBinding.guid, out var commandBindingBaker))
            {
                commandBindingBaker.Invoke(commandBinding, commandsHandler);
            }
        }
        
        public override void ReceiveCommand(IEntityCommand command)
        {
            switch (command)
            {
                default:
                    logger.Warning(Coherence.Log.Warning.ToolkitBakedSyncReceiveCommandUnhandled,
                        $"CoherenceSync_ff0eb699ebf32684891c45f672adc3ae Unhandled command: {command.GetType()}.");
                    break;
            }
        }
        
        public override void CreateEntity(bool usesLodsAtRuntime, string archetypeName, AbsoluteSimulationFrame simFrame, List<ICoherenceComponentData> components)
        {

            if (!usesLodsAtRuntime)
            {
                return;
            }
            
            if (Archetypes.IndexForName.TryGetValue(archetypeName, out int archetypeIndex))
            {
                components.Add(new ArchetypeComponent
                    {
                        index = archetypeIndex,
                        indexSimulationFrame = simFrame,
                        FieldsMask = 0b1
                    }
                );

                return;                
            }
    
            logger.Warning(Coherence.Log.Warning.ToolkitBakedSyncCreateEntityMissingArchetype,
                $"Unable to find archetype {archetypeName} in dictionary. Please, bake manually (coherence > Bake)");
        }
        
        public override void Dispose()
        {
        }
        
        public override void Initialize(Entity entityId, CoherenceBridge bridge, IClient client, CoherenceInput input, Logger logger)
        {
            this.logger = logger.With<CoherenceSync_ff0eb699ebf32684891c45f672adc3ae>();
            this.bridge = bridge;
            this.entityId = entityId;
            this.client = client;        
        }
    }
}
