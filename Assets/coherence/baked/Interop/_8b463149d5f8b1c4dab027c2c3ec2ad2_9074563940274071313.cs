// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    public struct _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Int32 totalEatenCount;
            [FieldOffset(4)]
            public System.Byte hasYellowBeenEaten;
            [FieldOffset(5)]
            public System.Byte hasGreenBeenEaten;
            [FieldOffset(6)]
            public System.Byte hasWon;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313.totalEatenCountMask;
            totalEatenCountSimulationFrame = frame;
            FieldsMask |= _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313.hasYellowBeenEatenMask;
            hasYellowBeenEatenSimulationFrame = frame;
            FieldsMask |= _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313.hasGreenBeenEatenMask;
            hasGreenBeenEatenSimulationFrame = frame;
            FieldsMask |= _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313.hasWonMask;
            hasWonSimulationFrame = frame;
        }

        public static unsafe _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 7) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 7) " +
                    "for component with ID 34");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 34");
            }

            var orig = new _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313();

            var comp = (Interop*)data;

            orig.totalEatenCount = comp->totalEatenCount;
            orig.hasYellowBeenEaten = comp->hasYellowBeenEaten != 0;
            orig.hasGreenBeenEaten = comp->hasGreenBeenEaten != 0;
            orig.hasWon = comp->hasWon != 0;

            return orig;
        }


        public static uint totalEatenCountMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame totalEatenCountSimulationFrame;
        public System.Int32 totalEatenCount;
        public static uint hasYellowBeenEatenMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame hasYellowBeenEatenSimulationFrame;
        public System.Boolean hasYellowBeenEaten;
        public static uint hasGreenBeenEatenMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame hasGreenBeenEatenSimulationFrame;
        public System.Boolean hasGreenBeenEaten;
        public static uint hasWonMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame hasWonSimulationFrame;
        public System.Boolean hasWon;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 34;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000001111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 4;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;

        private static readonly System.Int32 _totalEatenCount_Min = -2147483648;
        private static readonly System.Int32 _totalEatenCount_Max = 2147483647;

        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.totalEatenCountSimulationFrame = other.totalEatenCountSimulationFrame;
                this.totalEatenCount = other.totalEatenCount;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.hasYellowBeenEatenSimulationFrame = other.hasYellowBeenEatenSimulationFrame;
                this.hasYellowBeenEaten = other.hasYellowBeenEaten;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.hasGreenBeenEatenSimulationFrame = other.hasGreenBeenEatenSimulationFrame;
                this.hasGreenBeenEaten = other.hasGreenBeenEaten;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.hasWonSimulationFrame = other.hasWonSimulationFrame;
                this.hasWon = other.hasWon;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 4);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.totalEatenCount, _totalEatenCount_Min, _totalEatenCount_Max, "_8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313.totalEatenCount", logger);

                data.totalEatenCount = Coherence.Utils.Bounds.Clamp(data.totalEatenCount, _totalEatenCount_Min, _totalEatenCount_Max);

                var fieldValue = data.totalEatenCount;



                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.hasYellowBeenEaten;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.hasGreenBeenEaten;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.hasWon;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;

            return mask;
        }

        public static _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(4);
            }

            var val = new _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313();
            if (bitStream.ReadMask())
            {

                val.totalEatenCount = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313.totalEatenCountMask;
            }
            if (bitStream.ReadMask())
            {

                val.hasYellowBeenEaten = bitStream.ReadBool();
                val.FieldsMask |= _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313.hasYellowBeenEatenMask;
            }
            if (bitStream.ReadMask())
            {

                val.hasGreenBeenEaten = bitStream.ReadBool();
                val.FieldsMask |= _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313.hasGreenBeenEatenMask;
            }
            if (bitStream.ReadMask())
            {

                val.hasWon = bitStream.ReadBool();
                val.FieldsMask |= _8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313.hasWonMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_8b463149d5f8b1c4dab027c2c3ec2ad2_9074563940274071313(" +
                $" totalEatenCount: { this.totalEatenCount }" +
                $" hasYellowBeenEaten: { this.hasYellowBeenEaten }" +
                $" hasGreenBeenEaten: { this.hasGreenBeenEaten }" +
                $" hasWon: { this.hasWon }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(4, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(4, '0') })";
        }
    }

}
