// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    public struct _4d7f86b504afd6f419f3d65f80c82f8f_3136628078399885761 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public ByteArray networkedCurrentFieldId;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _4d7f86b504afd6f419f3d65f80c82f8f_3136628078399885761.networkedCurrentFieldIdMask;
            networkedCurrentFieldIdSimulationFrame = frame;
        }

        public static unsafe _4d7f86b504afd6f419f3d65f80c82f8f_3136628078399885761 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 16) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 16) " +
                    "for component with ID 28");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 28");
            }

            var orig = new _4d7f86b504afd6f419f3d65f80c82f8f_3136628078399885761();

            var comp = (Interop*)data;

            orig.networkedCurrentFieldId = comp->networkedCurrentFieldId.Data != null ? System.Text.Encoding.UTF8.GetString((byte*)comp->networkedCurrentFieldId.Data, (int)comp->networkedCurrentFieldId.Length) : null;

            return orig;
        }


        public static uint networkedCurrentFieldIdMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame networkedCurrentFieldIdSimulationFrame;
        public System.String networkedCurrentFieldId;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 28;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000000001;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 1;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;


        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_4d7f86b504afd6f419f3d65f80c82f8f_3136628078399885761)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.networkedCurrentFieldIdSimulationFrame = other.networkedCurrentFieldIdSimulationFrame;
                this.networkedCurrentFieldId = other.networkedCurrentFieldId;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_4d7f86b504afd6f419f3d65f80c82f8f_3136628078399885761 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 1);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.networkedCurrentFieldId;



                bitStream.WriteShortString(fieldValue);
            }

            mask >>= 1;

            return mask;
        }

        public static _4d7f86b504afd6f419f3d65f80c82f8f_3136628078399885761 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(1);
            }

            var val = new _4d7f86b504afd6f419f3d65f80c82f8f_3136628078399885761();
            if (bitStream.ReadMask())
            {

                val.networkedCurrentFieldId = bitStream.ReadShortString();
                val.FieldsMask |= _4d7f86b504afd6f419f3d65f80c82f8f_3136628078399885761.networkedCurrentFieldIdMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_4d7f86b504afd6f419f3d65f80c82f8f_3136628078399885761(" +
                $" networkedCurrentFieldId: { this.networkedCurrentFieldId }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(1, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(1, '0') })";
        }
    }

}
