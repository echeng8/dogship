// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    public struct _002e0f0727244a041abfd9d124ef5bce_3087197899905382075 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public Entity networkedCurrentFieldTransform;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _002e0f0727244a041abfd9d124ef5bce_3087197899905382075.networkedCurrentFieldTransformMask;
            networkedCurrentFieldTransformSimulationFrame = frame;
        }

        public static unsafe _002e0f0727244a041abfd9d124ef5bce_3087197899905382075 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 4) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 4) " +
                    "for component with ID 19");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 19");
            }

            var orig = new _002e0f0727244a041abfd9d124ef5bce_3087197899905382075();

            var comp = (Interop*)data;

            orig.networkedCurrentFieldTransform = comp->networkedCurrentFieldTransform;

            return orig;
        }


        public static uint networkedCurrentFieldTransformMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame networkedCurrentFieldTransformSimulationFrame;
        public Entity networkedCurrentFieldTransform;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 19;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000000001;
        public bool HasFields() => true;
        public bool HasRefFields() => true;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 1;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return new HashSet<Entity>()
            {
                this.networkedCurrentFieldTransform,
            };
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            uint refsMask = 0;

            if (this.networkedCurrentFieldTransform == fromEntity)
            {
                this.networkedCurrentFieldTransform = toEntity;
                refsMask |= 1 << 0;
            }

            FieldsMask |= refsMask;

            return refsMask;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            Entity absoluteEntity;
            IEntityMapper.Error err;
            err = mapper.MapToAbsoluteEntity(this.networkedCurrentFieldTransform, false, out absoluteEntity);

            if (err != IEntityMapper.Error.None)
            {
                return err;
            }

            this.networkedCurrentFieldTransform = absoluteEntity;
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            Entity relativeEntity;
            IEntityMapper.Error err;
            // We assume that the inConnection held changes with unresolved references, so the 'createMapping=true' is
            // there only because there's a chance that the parent creation change will be processed after this one
            // meaning there's no mapping for the parent yet. This wouldn't be necessary if mapping creation would happen
            // in the clientWorld via create/destroy requests while here we would only check whether mapping exists or not.
            var createParentMapping_networkedCurrentFieldTransform = true;
            err = mapper.MapToRelativeEntity(this.networkedCurrentFieldTransform, createParentMapping_networkedCurrentFieldTransform,
             out relativeEntity);

            if (err != IEntityMapper.Error.None)
            {
                return err;
            }

            this.networkedCurrentFieldTransform = relativeEntity;
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;


        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_002e0f0727244a041abfd9d124ef5bce_3087197899905382075)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.networkedCurrentFieldTransformSimulationFrame = other.networkedCurrentFieldTransformSimulationFrame;
                this.networkedCurrentFieldTransform = other.networkedCurrentFieldTransform;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_002e0f0727244a041abfd9d124ef5bce_3087197899905382075 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 1);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.networkedCurrentFieldTransform;



                bitStream.WriteEntity(fieldValue);
            }

            mask >>= 1;

            return mask;
        }

        public static _002e0f0727244a041abfd9d124ef5bce_3087197899905382075 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(1);
            }

            var val = new _002e0f0727244a041abfd9d124ef5bce_3087197899905382075();
            if (bitStream.ReadMask())
            {

                val.networkedCurrentFieldTransform = bitStream.ReadEntity();
                val.FieldsMask |= _002e0f0727244a041abfd9d124ef5bce_3087197899905382075.networkedCurrentFieldTransformMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_002e0f0727244a041abfd9d124ef5bce_3087197899905382075(" +
                $" networkedCurrentFieldTransform: { this.networkedCurrentFieldTransform }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(1, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(1, '0') })";
        }
    }

}
