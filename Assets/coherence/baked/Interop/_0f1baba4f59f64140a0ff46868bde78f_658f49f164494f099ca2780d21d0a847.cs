// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.Brook;
    using Coherence.Entities;
    using Coherence.Log;
    using Coherence.Core;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using UnityEngine;

    public struct _0f1baba4f59f64140a0ff46868bde78f_658f49f164494f099ca2780d21d0a847 : IEntityCommand
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public Entity playerGameObject;
        }

        public static unsafe _0f1baba4f59f64140a0ff46868bde78f_658f49f164494f099ca2780d21d0a847 FromInterop(System.IntPtr data, System.Int32 dataSize) 
        {
            if (dataSize != 4) {
                throw new System.Exception($"Given data size is not equal to the struct size. ({dataSize} != 4) " +
                    "for command with ID 15");
            }

            var orig = new _0f1baba4f59f64140a0ff46868bde78f_658f49f164494f099ca2780d21d0a847();
            var comp = (Interop*)data;
            orig.playerGameObject = comp->playerGameObject;
            return orig;
        }

        public Entity playerGameObject;
        
        public Entity Entity { get; set; }
        public Coherence.ChannelID ChannelID { get; set; }
        public MessageTarget Routing { get; set; }
        public uint Sender { get; set; }
        public uint GetComponentType() => 15;
        
        public IEntityMessage Clone()
        {
            // This is a struct, so we can safely return
            // a struct copy.
            return this;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToAbsoluteEntity(Entity, false, out var absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = absoluteEntity;
            err = mapper.MapToAbsoluteEntity(playerGameObject, false, out absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            this.playerGameObject = absoluteEntity;
            
            return IEntityMapper.Error.None;
        }
        
        public IEntityMapper.Error MapToRelative(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToRelativeEntity(Entity, false, out var relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = relativeEntity;
            err = mapper.MapToRelativeEntity(playerGameObject, false, out relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            this.playerGameObject = relativeEntity;
            
            return IEntityMapper.Error.None;
        }

        public HashSet<Entity> GetEntityRefs() {
            return new HashSet<Entity> {
                this.playerGameObject,
            };
        }

        public void NullEntityRefs(Entity entity) {
            if (this.playerGameObject == entity) {
                this.playerGameObject = Entity.InvalidRelative;
            }
        }
        
        public _0f1baba4f59f64140a0ff46868bde78f_658f49f164494f099ca2780d21d0a847(
        Entity entity,
        Entity playerGameObject
)
        {
            Entity = entity;
            ChannelID = Coherence.ChannelID.Default;
            Routing = MessageTarget.All;
            Sender = 0;
            
            this.playerGameObject = playerGameObject; 
        }
        
        public static void Serialize(_0f1baba4f59f64140a0ff46868bde78f_658f49f164494f099ca2780d21d0a847 commandData, IOutProtocolBitStream bitStream)
        {
            bitStream.WriteEntity(commandData.playerGameObject);
        }
        
        public static _0f1baba4f59f64140a0ff46868bde78f_658f49f164494f099ca2780d21d0a847 Deserialize(IInProtocolBitStream bitStream, Entity entity, MessageTarget target)
        {
            var dataplayerGameObject = bitStream.ReadEntity();
    
            return new _0f1baba4f59f64140a0ff46868bde78f_658f49f164494f099ca2780d21d0a847()
            {
                Entity = entity,
                Routing = target,
                playerGameObject = dataplayerGameObject
            };   
        }
    }

}
