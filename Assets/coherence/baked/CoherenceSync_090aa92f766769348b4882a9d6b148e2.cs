// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using Coherence.Toolkit;
    using Coherence.Toolkit.Bindings;
    using Coherence.Entities;
    using Coherence.ProtocolDef;
    using Coherence.Brook;
    using Coherence.Toolkit.Bindings.ValueBindings;
    using Coherence.Toolkit.Bindings.TransformBindings;
    using Coherence.Connection;
    using Coherence.SimulationFrame;
    using Coherence.Interpolation;
    using Coherence.Log;
    using Logger = Coherence.Log.Logger;
    using UnityEngine.Scripting;
    [UnityEngine.Scripting.Preserve]
    public class Binding_090aa92f766769348b4882a9d6b148e2_9f6c986be48549a983fd8da1d4d8f963 : PositionBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(WorldPosition);
        public override string CoherenceComponentName => "WorldPosition";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(coherenceSync.coherencePosition); }
            set { coherenceSync.coherencePosition = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldPosition)coherenceComponent).value;
            if (!coherenceSync.HasParentWithCoherenceSync) { value += floatingOriginDelta; }

            var simFrame = ((WorldPosition)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (WorldPosition)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldPosition();
        }    
    }
    [UnityEngine.Scripting.Preserve]
    public class Binding_090aa92f766769348b4882a9d6b148e2_fbf6e9b29ef54d90835ded93db19b012 : RotationBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(WorldOrientation);
        public override string CoherenceComponentName => "WorldOrientation";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Quaternion Value
        {
            get { return (UnityEngine.Quaternion)(coherenceSync.coherenceRotation); }
            set { coherenceSync.coherenceRotation = (UnityEngine.Quaternion)(value); }
        }

        protected override (UnityEngine.Quaternion value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldOrientation)coherenceComponent).value;

            var simFrame = ((WorldOrientation)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (WorldOrientation)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldOrientation();
        }    
    }
    [UnityEngine.Scripting.Preserve]
    public class Binding_090aa92f766769348b4882a9d6b148e2_2be1dc395550450bbf3c9d7c2200c945 : Vector3Binding
    {   
        private global::UnityEngine.Rigidbody CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Rigidbody)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_090aa92f766769348b4882a9d6b148e2_3543296725183664751);
        public override string CoherenceComponentName => "_090aa92f766769348b4882a9d6b148e2_3543296725183664751";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(CastedUnityComponent.velocity); }
            set { CastedUnityComponent.velocity = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_090aa92f766769348b4882a9d6b148e2_3543296725183664751)coherenceComponent).velocity;

            var simFrame = ((_090aa92f766769348b4882a9d6b148e2_3543296725183664751)coherenceComponent).velocitySimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_090aa92f766769348b4882a9d6b148e2_3543296725183664751)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.velocity = Value;
            }
            else
            {
                update.velocity = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.velocitySimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _090aa92f766769348b4882a9d6b148e2_3543296725183664751();
        }    
    }
    [UnityEngine.Scripting.Preserve]
    public class Binding_090aa92f766769348b4882a9d6b148e2_70d03a3e14fe48698b58ac8be3ce3099 : Vector3Binding
    {   
        private global::UnityEngine.Rigidbody CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Rigidbody)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_090aa92f766769348b4882a9d6b148e2_3543296725183664751);
        public override string CoherenceComponentName => "_090aa92f766769348b4882a9d6b148e2_3543296725183664751";
        public override uint FieldMask => 0b00000000000000000000000000000010;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(CastedUnityComponent.angularVelocity); }
            set { CastedUnityComponent.angularVelocity = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_090aa92f766769348b4882a9d6b148e2_3543296725183664751)coherenceComponent).angularVelocity;

            var simFrame = ((_090aa92f766769348b4882a9d6b148e2_3543296725183664751)coherenceComponent).angularVelocitySimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_090aa92f766769348b4882a9d6b148e2_3543296725183664751)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.angularVelocity = Value;
            }
            else
            {
                update.angularVelocity = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.angularVelocitySimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _090aa92f766769348b4882a9d6b148e2_3543296725183664751();
        }    
    }
    [UnityEngine.Scripting.Preserve]
    public class Binding_090aa92f766769348b4882a9d6b148e2_df8a6a22abcb40cbbe597114392dec71 : Vector3Binding
    {   
        private global::Gravitas.GravitasBody CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Gravitas.GravitasBody)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_090aa92f766769348b4882a9d6b148e2_3543296725183664748);
        public override string CoherenceComponentName => "_090aa92f766769348b4882a9d6b148e2_3543296725183664748";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(CastedUnityComponent.AngularVelocity); }
            set { CastedUnityComponent.AngularVelocity = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_090aa92f766769348b4882a9d6b148e2_3543296725183664748)coherenceComponent).AngularVelocity;

            var simFrame = ((_090aa92f766769348b4882a9d6b148e2_3543296725183664748)coherenceComponent).AngularVelocitySimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_090aa92f766769348b4882a9d6b148e2_3543296725183664748)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.AngularVelocity = Value;
            }
            else
            {
                update.AngularVelocity = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.AngularVelocitySimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _090aa92f766769348b4882a9d6b148e2_3543296725183664748();
        }    
    }
    [UnityEngine.Scripting.Preserve]
    public class Binding_090aa92f766769348b4882a9d6b148e2_ebb35f6b6b5c493e9629772c349e36bc : Vector3Binding
    {   
        private global::Gravitas.GravitasBody CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Gravitas.GravitasBody)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_090aa92f766769348b4882a9d6b148e2_3543296725183664748);
        public override string CoherenceComponentName => "_090aa92f766769348b4882a9d6b148e2_3543296725183664748";
        public override uint FieldMask => 0b00000000000000000000000000000010;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(CastedUnityComponent.Velocity); }
            set { CastedUnityComponent.Velocity = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_090aa92f766769348b4882a9d6b148e2_3543296725183664748)coherenceComponent).Velocity;

            var simFrame = ((_090aa92f766769348b4882a9d6b148e2_3543296725183664748)coherenceComponent).VelocitySimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_090aa92f766769348b4882a9d6b148e2_3543296725183664748)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.Velocity = Value;
            }
            else
            {
                update.Velocity = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.VelocitySimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _090aa92f766769348b4882a9d6b148e2_3543296725183664748();
        }    
    }
    [UnityEngine.Scripting.Preserve]
    public class Binding_090aa92f766769348b4882a9d6b148e2_3d39b6683906472997bd0f12c783f807 : BoolBinding
    {   
        private global::Gravitas.GravitasBody CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Gravitas.GravitasBody)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_090aa92f766769348b4882a9d6b148e2_3543296725183664748);
        public override string CoherenceComponentName => "_090aa92f766769348b4882a9d6b148e2_3543296725183664748";
        public override uint FieldMask => 0b00000000000000000000000000000100;

        public override System.Boolean Value
        {
            get { return (System.Boolean)(CastedUnityComponent.IsLanded); }
            set { CastedUnityComponent.IsLanded = (System.Boolean)(value); }
        }

        protected override (System.Boolean value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_090aa92f766769348b4882a9d6b148e2_3543296725183664748)coherenceComponent).IsLanded;

            var simFrame = ((_090aa92f766769348b4882a9d6b148e2_3543296725183664748)coherenceComponent).IsLandedSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_090aa92f766769348b4882a9d6b148e2_3543296725183664748)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.IsLanded = Value;
            }
            else
            {
                update.IsLanded = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.IsLandedSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _090aa92f766769348b4882a9d6b148e2_3543296725183664748();
        }    
    }
    [UnityEngine.Scripting.Preserve]
    public class Binding_090aa92f766769348b4882a9d6b148e2_88576139efd24c548b5d1ba4a8f5c5a3 : BoolBinding
    {   
        private global::Gravitas.GravitasBody CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Gravitas.GravitasBody)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(_090aa92f766769348b4882a9d6b148e2_3543296725183664748);
        public override string CoherenceComponentName => "_090aa92f766769348b4882a9d6b148e2_3543296725183664748";
        public override uint FieldMask => 0b00000000000000000000000000001000;

        public override System.Boolean Value
        {
            get { return (System.Boolean)(CastedUnityComponent.enabled); }
            set { CastedUnityComponent.enabled = (System.Boolean)(value); }
        }

        protected override (System.Boolean value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_090aa92f766769348b4882a9d6b148e2_3543296725183664748)coherenceComponent).enabled;

            var simFrame = ((_090aa92f766769348b4882a9d6b148e2_3543296725183664748)coherenceComponent).enabledSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_090aa92f766769348b4882a9d6b148e2_3543296725183664748)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.enabled = Value;
            }
            else
            {
                update.enabled = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.enabledSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _090aa92f766769348b4882a9d6b148e2_3543296725183664748();
        }    
    }

    [UnityEngine.Scripting.Preserve]
    public class CoherenceSync_090aa92f766769348b4882a9d6b148e2 : CoherenceSyncBaked
    {
        private Entity entityId;
        private Logger logger = Coherence.Log.Log.GetLogger<CoherenceSync_090aa92f766769348b4882a9d6b148e2>();
        
        
        
        private IClient client;
        private CoherenceBridge bridge;
        
        private readonly Dictionary<string, Binding> bakedValueBindings = new Dictionary<string, Binding>()
        {
			["9f6c986be48549a983fd8da1d4d8f963"] = new Binding_090aa92f766769348b4882a9d6b148e2_9f6c986be48549a983fd8da1d4d8f963(),
			["fbf6e9b29ef54d90835ded93db19b012"] = new Binding_090aa92f766769348b4882a9d6b148e2_fbf6e9b29ef54d90835ded93db19b012(),
			["2be1dc395550450bbf3c9d7c2200c945"] = new Binding_090aa92f766769348b4882a9d6b148e2_2be1dc395550450bbf3c9d7c2200c945(),
			["70d03a3e14fe48698b58ac8be3ce3099"] = new Binding_090aa92f766769348b4882a9d6b148e2_70d03a3e14fe48698b58ac8be3ce3099(),
			["df8a6a22abcb40cbbe597114392dec71"] = new Binding_090aa92f766769348b4882a9d6b148e2_df8a6a22abcb40cbbe597114392dec71(),
			["ebb35f6b6b5c493e9629772c349e36bc"] = new Binding_090aa92f766769348b4882a9d6b148e2_ebb35f6b6b5c493e9629772c349e36bc(),
			["3d39b6683906472997bd0f12c783f807"] = new Binding_090aa92f766769348b4882a9d6b148e2_3d39b6683906472997bd0f12c783f807(),
			["88576139efd24c548b5d1ba4a8f5c5a3"] = new Binding_090aa92f766769348b4882a9d6b148e2_88576139efd24c548b5d1ba4a8f5c5a3(),
        };
        
        private Dictionary<string, Action<CommandBinding, CommandsHandler>> bakedCommandBindings = new Dictionary<string, Action<CommandBinding, CommandsHandler>>();
        
        public CoherenceSync_090aa92f766769348b4882a9d6b148e2()
        {
        }
        
        public override Binding BakeValueBinding(Binding valueBinding)
        {
            if (bakedValueBindings.TryGetValue(valueBinding.guid, out var bakedBinding))
            {
                valueBinding.CloneTo(bakedBinding);
                return bakedBinding;
            }
            
            return null;
        }
        
        public override void BakeCommandBinding(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            if (bakedCommandBindings.TryGetValue(commandBinding.guid, out var commandBindingBaker))
            {
                commandBindingBaker.Invoke(commandBinding, commandsHandler);
            }
        }
        
        public override void ReceiveCommand(IEntityCommand command)
        {
            switch (command)
            {
                default:
                    logger.Warning(Coherence.Log.Warning.ToolkitBakedSyncReceiveCommandUnhandled,
                        $"CoherenceSync_090aa92f766769348b4882a9d6b148e2 Unhandled command: {command.GetType()}.");
                    break;
            }
        }
        
        public override void CreateEntity(bool usesLodsAtRuntime, string archetypeName, AbsoluteSimulationFrame simFrame, List<ICoherenceComponentData> components)
        {

            if (!usesLodsAtRuntime)
            {
                return;
            }
            
            if (Archetypes.IndexForName.TryGetValue(archetypeName, out int archetypeIndex))
            {
                components.Add(new ArchetypeComponent
                    {
                        index = archetypeIndex,
                        indexSimulationFrame = simFrame,
                        FieldsMask = 0b1
                    }
                );

                return;                
            }
    
            logger.Warning(Coherence.Log.Warning.ToolkitBakedSyncCreateEntityMissingArchetype,
                $"Unable to find archetype {archetypeName} in dictionary. Please, bake manually (coherence > Bake)");
        }
        
        public override void Dispose()
        {
        }
        
        public override void Initialize(Entity entityId, CoherenceBridge bridge, IClient client, CoherenceInput input, Logger logger)
        {
            this.logger = logger.With<CoherenceSync_090aa92f766769348b4882a9d6b148e2>();
            this.bridge = bridge;
            this.entityId = entityId;
            this.client = client;        
        }
    }
}
